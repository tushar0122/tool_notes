ConcurrentHashMap
    => ConcurrentHashMap is a thread-safe implementation of the Map interface in Java, which means multiple threads can access it simultaneously without any synchronization issues. 
    => One of the key features of the ConcurrentHashMap is that it provides fine-grained locking, meaning that it locks only the portion of the map being modified, rather than the entire map. This makes it highly scalable and efficient for concurrent operations.
    => Additionally, the ConcurrentHashMap provides various methods for atomic operations such as putIfAbsent(), replace(), and remove()
    => At a time any number of threads are applicable for a read operation without locking the ConcurrentHashMap object which is not there in HashMap.
    => In ConcurrentHashMap, the Object is divided into a number of segments according to the concurrency level.
    => The default concurrency-level of ConcurrentHashMap is 16.
    => The default concurrency-level of ConcurrentHashMap is 16.
    => In ConcurrentHashMap, at a time any number of threads can perform retrieval operation but for updated in the object, the thread must lock the particular segment in which the thread wants to operate. This type of locking mechanism is known as Segment locking or bucket locking. Hence at a time, 16 update operations can be performed by threads.
    => Inserting null objects is not possible in ConcurrentHashMap as a key or value.

Initialize 
    => Creates a new, empty map with a default initial capacity (16), load factor (0.75) and concurrencyLevel (16).